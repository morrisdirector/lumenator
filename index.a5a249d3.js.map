{"mappings":"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","sources":["./src/shared/enums/Mode.ts","./src/shared/enums/OnOff.ts","./src/script.ts"],"sourcesContent":["export enum Mode {\n    STANDBY, RGB, WHITE, GPIO_TESTING\n}","export enum OnOff {\n    OFF, ON\n}","import { Mode } from './shared/enums/Mode';\nimport { OnOff } from './shared/enums/OnOff';\n\n\n// Debugging Mode\nconst DEBUG = false;\n\nconst errors = [];\n\nlet websocket;\nlet config;\nlet devicePresets;\nlet mode = Mode.STANDBY;\nlet rgbControlColorPicker;\n\nconst setDomValue = (id, value) => {\n\tconst el = document.getElementById(id);\n\tif (el) {\n\t\tif (typeof el.updateValue === 'function') {\n\t\t\tel.updateValue(value);\n\t\t} else {\n\t\t\tel.innerText = value;\n\t\t}\n\t}\n};\n\nconst setComponentState = (id, state) => {\n\tconst component = document.getElementById(id);\n\tif (component) {\n\t\tcomponent.setState(state);\n\t}\n};\n\nconst testData = () => {\n\treturn {\n\t\tdevice: {\n\t\t\tname: 'Bulb Test 1',\n\t\t\tmap_preset: 'wemos',\n\t\t\tdevice_type: 0,\n\t\t\tgpio_w: 15,\n\t\t\tgpio_ww: 13,\n\t\t\tgpio_r: 12,\n\t\t\tgpio_g: 14,\n\t\t\tgpio_b: 16\n\t\t},\n\t\tnetwork: {\n\t\t\tssid: 'Fake SSID',\n\t\t\tpassword: 'password'\n\t\t}\n\t};\n};\n\nconst onWsError = (evt) => {\n\tdocument.querySelector('#error-messages').setState({ text: 'Error establishing Web Socket connection' });\n\twindow.scrollTo(0, 0);\n\tconsole.log(evt);\n};\n\nconst wsConnect = () => {\n\tconst url = 'ws://' + document.location.host + ':1337';\n\tif (document.location.host.length) {\n\t\tlet i = 0;\n\t\tconst connectionInt = setInterval(() => {\n\t\t\ti++;\n\t\t\twebsocket = new WebSocket(url);\n\t\t\twebsocket.onopen = () => {\n\t\t\t\tclearInterval(connectionInt);\n\t\t\t};\n\t\t\t// websocket.onopen = function (evt) { onOpen(evt) };\n\t\t\t// websocket.onclose = function (evt) { onClose(evt) };\n\t\t\t// websocket.onmessage = function (evt) { onMessage(evt) };\n\t\t\twebsocket.onerror = (evt) => {\n\t\t\t\tif (i === 5) {\n\t\t\t\t\tclearInterval(connectionInt);\n\t\t\t\t\tonWsError(evt);\n\t\t\t\t}\n\t\t\t};\n\t\t}, 1000);\n\t}\n};\n\nconst showPassword = () => {\n\tconst el = document.getElementById('password');\n\tconst newState = el.state.type === 'password' ? 'text' : 'password';\n\tsetComponentState('password', { type: newState });\n\tsetDomValue('show-password-button', newState === 'password' ? 'Show' : 'Hide');\n};\n\nconst setDeviceModels = () => {\n\tconst deviceModels = Object.keys(config.device);\n\tdeviceModels.forEach((model) => {\n\t\tsetComponentState(model, { value: config.device[model] });\n\t});\n\n\tif (config.device.name) {\n\t\tsetComponentState('title-chip', { text: config.device.name });\n\t}\n};\n\nconst setNetworkModels = () => {\n\tconst networkModels = Object.keys(config.network);\n\tnetworkModels.forEach((model) => {\n\t\tsetComponentState(model, { value: config.network[model] });\n\t});\n};\n\nconst loadConfigJson = () => {\n\tconst loadData = (data) => {\n\t\tconfig = data;\n\t\tconsole.log(config);\n\t\tif (config.device) {\n\t\t\tsetDeviceModels();\n\t\t}\n\t\tif (config.network) {\n\t\t\tsetNetworkModels();\n\t\t}\n\t};\n\n\tif (DEBUG) {\n\t\tloadData(testData());\n\t\treturn;\n\t}\n\n\tfetch('config')\n\t\t.then(function(response) {\n\t\t\treturn response.json();\n\t\t})\n\t\t.then(function(data) {\n\t\t\tif (data) {\n\t\t\t\tloadData(data);\n\t\t\t}\n\t\t})\n\t\t.catch(function(e) {\n\t\t\tconsole.warn('Something went wrong loading the config json file.', e);\n\t\t\twindow.scrollTo(0, 0);\n\t\t\tdocument.querySelector('#error-messages').setState({ text: 'Error loading configuration' });\n\t\t});\n};\n\nconst loadDevicePresets = () => {\n\tif (DEBUG) {\n\t\treturn;\n\t}\n\n\tfetch('devicePresets')\n\t\t.then((response) => response.json())\n\t\t.then((data) => {\n\t\t\tif (data) {\n\t\t\t\tdevicePresets = data;\n\t\t\t}\n\t\t})\n\t\t.catch(function(e) {\n\t\t\tconsole.warn('Something went wrong loading the device presets.', e);\n\t\t\twindow.scrollTo(0, 0);\n\t\t\tdocument.querySelector('#error-messages').setState({ text: 'Error loading device presets' });\n\t\t});\n};\n\nconst addEventListeners = () => {\n\t// Page Settings:\n\tdocument.addEventListener('touchstart', function() {}, true); // mobile safari styling\n\n\t// Mode Toggles\n\tconst modeToggleSwitches = Array.from(document.querySelectorAll('.mode-toggle'));\n\tfor (let toggle of modeToggleSwitches) {\n\t\ttoggle.addEventListener('onToggle', (e) => {\n\t\t\tconst state = e.target.state;\n\t\t\tif (state.state === 'ON') {\n\t\t\t\tfor (let t of modeToggleSwitches) {\n\t\t\t\t\tif (t.state.id !== state.id && t.state.state === 'ON') {\n\t\t\t\t\t\tt.setState({ state: 'OFF' });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tswitch (state.id) {\n\t\t\t\t\tcase 'modeRgb':\n\t\t\t\t\t\tmode = Mode.RGB;\n\t\t\t\t\t\tdocument.querySelector('#rgb-warning').setState({\n\t\t\t\t\t\t\ttext:\n\t\t\t\t\t\t\t\t'While manual RGB mode is enabled, Lumenator will not respond to external control commands.'\n\t\t\t\t\t\t});\n\t\t\t\t\t\tsendRgbColors();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'modeWhite':\n\t\t\t\t\t\tmode = Mode.WHITE;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t// GPIO Testing Mode\n\t\t\t\t\t\tmode = Mode.GPIO_TESTING;\n\t\t\t\t\t\tdocument.querySelector('#gpio-test-warning').setState({\n\t\t\t\t\t\t\ttext:\n\t\t\t\t\t\t\t\t'While GPIO testing is enabled, Lumenator will not respond to external control commands.'\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else if (state.state === 'OFF') {\n\t\t\t\tmode = Mode.STANDBY;\n\t\t\t\tdocument.querySelector('#gpio-test-warning').setState({\n\t\t\t\t\tvisible: false,\n\t\t\t\t\ttext: null\n\t\t\t\t});\n\t\t\t\tdocument.querySelector('#rgb-warning').setState({\n\t\t\t\t\tvisible: false,\n\t\t\t\t\ttext: null\n\t\t\t\t});\n\t\t\t\tif (websocket) {\n\t\t\t\t\twebsocket.send('standby');\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (websocket && state.id !== 'modeRgb' && state.id !== 'modeWhite') {\n\t\t\t\twebsocket.send(`${e.detail.id}:${OnOff[e.detail.state]}`);\n\t\t\t}\n\t\t});\n\t}\n};\n\nconst saveConfiguration = () => {\n\t// document.querySelector('#loader').setState({ loading: true });\n\tlet dto = {};\n\tconst sections = Object.keys(config);\n\tsections.forEach((section) => {\n\t\tdto[section] = {};\n\t\tconst props = Object.keys(config[section]);\n\t\tprops.forEach((prop) => {\n\t\t\tdto[section][prop] = document.getElementById(prop).state.value;\n\t\t});\n\t});\n\tfetch('config', {\n\t\tmethod: 'post',\n\t\theaders: {\n\t\t\tAccept: 'application/json, text/plain, */*',\n\t\t\t'Content-Type': 'application/json'\n\t\t},\n\t\tbody: JSON.stringify(dto)\n\t})\n\t\t.then((res) => res.json())\n\t\t.then((res) => {\n\t\t\t// document.querySelector('#loader').setState({ loading: false });\n\t\t\tif (res.success) {\n\t\t\t\tdocument\n\t\t\t\t\t.querySelector('#info-messages')\n\t\t\t\t\t.setState({ text: 'Updated Configuration Successfully', visible: true });\n\t\t\t\twindow.scrollTo(0, 0);\n\t\t\t} else {\n\t\t\t\tdocument\n\t\t\t\t\t.querySelector('#error-messages')\n\t\t\t\t\t.setState({ text: 'Something went wrong while saving the configuration', visible: true });\n\t\t\t\twindow.scrollTo(0, 0);\n\t\t\t}\n\t\t})\n\t\t.catch((e) => {\n\t\t\tconsole.log(e);\n\t\t\tdocument\n\t\t\t\t.querySelector('#error-messages')\n\t\t\t\t.setState({ text: 'Something went wrong while saving the configuration', visible: true });\n\t\t\twindow.scrollTo(0, 0);\n\t\t});\n};\n\nconst refresh = () => {\n\twindow.location.reload();\n};\n\nconst sendRgbColors = () => {\n\tif (mode !== Mode.RGB) {\n\t\tmode = Mode.RGB;\n\t\tdocument.querySelector('#modeRgb').setState({ state: 'ON' });\n\t}\n\tconst color = rgbControlColorPicker.getCurColorRgb();\n\tconst r = `00${color.r}`.slice(`00${color.r}`.length - 3);\n\tconst g = `00${color.g}`.slice(`00${color.g}`.length - 3);\n\tconst b = `00${color.b}`.slice(`00${color.b}`.length - 3);\n\n\tif (websocket) {\n\t\twebsocket.send(`rgbctrl:r:${r}:g:${g}:b:${b}`);\n\t}\n};\n\nconst loadColorPickers = () => {\n\t// Control Page Color Picker\n\trgbControlColorPicker = new KellyColorPicker({\n\t\tplace: 'control-color-picker',\n\t\tsize: 225,\n\t\tcolor: 'rgb(0, 0, 255)',\n\t\tuserEvents: {\n\t\t\tmousemoveh: () => {\n\t\t\t\tsendRgbColors();\n\t\t\t},\n\t\t\tmousemovesv: () => {\n\t\t\t\tsendRgbColors();\n\t\t\t},\n\t\t\tmouseuph: () => {\n\t\t\t\tsendRgbColors();\n\t\t\t},\n\t\t\tmouseupsv: () => {\n\t\t\t\tsendRgbColors();\n\t\t\t}\n\t\t}\n\t});\n};\n\nconst init = () => {\n\tif (!DEBUG) {\n\t\twsConnect();\n\t}\n\taddEventListeners();\n\tloadConfigJson();\n\tloadDevicePresets();\n\tloadColorPickers();\n};\n\ninit();\n"],"names":["Mode","OnOff","websocket","config","rgbControlColorPicker","mode","$e19a1cf00f15835f653dc23988ec$export$Mode","STANDBY","setComponentState","id","state","component","document","getElementById","setState","loadConfigJson","loadData","data","console","log","device","Object","keys","forEach","model","value","name","text","network","fetch","then","response","json","catch","e","warn","window","scrollTo","querySelector","sendRgbColors","RGB","color","getCurColorRgb","r","concat","slice","length","g","b","send","url","location","host","i","connectionInt","setInterval","WebSocket","onopen","clearInterval","onerror","evt","onWsError","wsConnect","addEventListener","modeToggleSwitches","Array","from","querySelectorAll","_i","_modeToggleSwitches","target","_step","_iterator","$fafa699f211416fb40e96546cc703e16$var$_createForOfIteratorHelper","s","n","done","t","err","f","WHITE","GPIO_TESTING","visible","detail","$d1e9aedc6aafde5c9b25825ade8567e9$export$OnOff","addEventListeners","KellyColorPicker","place","size","userEvents","mousemoveh","mousemovesv","mouseuph","mouseupsv"],"version":3,"file":"index.a5a249d3.js.map"}